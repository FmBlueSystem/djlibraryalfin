"""Dialog para mostrar recomendaciones de canciones compatibles."""

from PySide6.QtCore import Qt, Signal, QThread, QTimer
from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
                               QTableWidget, QTableWidgetItem, QProgressBar, QSplitter,
                               QTextEdit, QHeaderView, QAbstractItemView, QMessageBox,
                               QComboBox, QSpinBox, QGroupBox, QTabWidget, QWidget)
from PySide6.QtGui import QFont, QIcon
from typing import Dict, List, Optional, Tuple, Any

from services.recommendation_service import get_recommendation_service
from core.dj_transition_analyzer import TransitionAnalysis


class RecommendationWorker(QThread):
    """Worker thread para generar recomendaciones en background."""
    
    recommendations_ready = Signal(list)  # List[Tuple[Dict, TransitionAnalysis]]
    error_occurred = Signal(str)
    progress_updated = Signal(int)
    
    def __init__(self, current_track: Dict, limit: int = 20, min_score: float = 0.4, filters: Optional[Dict] = None):
        super().__init__()
        self.current_track = current_track
        self.limit = limit
        self.min_score = min_score
        self.filters = filters
        self.rec_service = get_recommendation_service()
    
    def run(self):
        """Ejecuta la generaci√≥n de recomendaciones."""
        try:
            self.progress_updated.emit(25)
            
            # Generar recomendaciones
            recommendations = self.rec_service.get_compatible_tracks(
                self.current_track, 
                self.limit, 
                self.min_score, 
                self.filters
            )
            
            self.progress_updated.emit(100)
            self.recommendations_ready.emit(recommendations)
            
        except Exception as e:
            self.error_occurred.emit(str(e))


class RecommendationsDialog(QDialog):
    """
    Di√°logo avanzado para mostrar recomendaciones de canciones compatibles.
    
    Features:
    - An√°lisis de compatibilidad DJ profesional
    - Scoring por BPM, tonalidad, energ√≠a y mood
    - Informaci√≥n t√©cnica detallada
    - Agregar tracks a playlists
    - Filtros configurables
    """
    
    track_selected = Signal(dict)  # Emitido cuando se selecciona un track para reproducir
    
    def __init__(self, current_track: Dict, parent=None):
        super().__init__(parent)
        self.current_track = current_track
        self.recommendations = []
        self.worker = None
        
        self.setWindowTitle(f"üéØ Recomendaciones para '{current_track.get('title', 'Unknown')}'")
        self.setModal(False)  # Permitir interacci√≥n con ventana principal
        self.resize(1000, 700)
        
        self.setup_ui()
        self.connect_signals()
        self.start_recommendation_generation()
    
    def setup_ui(self):
        """Configura la interfaz de usuario."""
        layout = QVBoxLayout(self)
        layout.setSpacing(8)
        
        # Header con informaci√≥n del track actual
        self.create_header_section(layout)
        
        # Tabs principales
        self.create_tabs_section(layout)
        
        # Botones de acci√≥n
        self.create_action_buttons(layout)
        
        # Aplicar estilos
        self.apply_styles()
    
    def create_header_section(self, parent_layout):
        """Crea la secci√≥n de header con info del track actual."""
        header_group = QGroupBox("üéµ Track Actual")
        header_layout = QHBoxLayout(header_group)
        
        # Info del track
        track_info = QLabel()
        title = self.current_track.get('title', 'Unknown')
        artist = self.current_track.get('artist', 'Unknown')
        bpm = self.current_track.get('bpm', 'N/A')
        key = self.current_track.get('key', 'Unknown')
        genre = self.current_track.get('genre', 'Unknown')
        
        track_info.setText(f"""
        <b>{title}</b> - {artist}<br>
        üéõÔ∏è {bpm} BPM | üéº {key} | üé® {genre}
        """)
        track_info.setProperty("class", "track_info")
        
        # Controles de filtros
        filters_layout = QVBoxLayout()
        filters_layout.addWidget(QLabel("Filtros:"))
        
        # Controles de filtro
        filter_controls = QHBoxLayout()
        
        filter_controls.addWidget(QLabel("M√≠n. Score:"))
        self.min_score_spin = QSpinBox()
        self.min_score_spin.setRange(0, 100)
        self.min_score_spin.setValue(40)
        self.min_score_spin.setSuffix("%")
        filter_controls.addWidget(self.min_score_spin)
        
        filter_controls.addWidget(QLabel("L√≠mite:"))
        self.limit_spin = QSpinBox()
        self.limit_spin.setRange(5, 50)
        self.limit_spin.setValue(20)
        filter_controls.addWidget(self.limit_spin)
        
        self.refresh_btn = QPushButton("üîÑ Actualizar")
        self.refresh_btn.setProperty("class", "btn_primary")
        filter_controls.addWidget(self.refresh_btn)
        
        filters_layout.addLayout(filter_controls)
        
        header_layout.addWidget(track_info, 2)
        header_layout.addLayout(filters_layout, 1)
        
        parent_layout.addWidget(header_group)
    
    def create_tabs_section(self, parent_layout):
        """Crea las tabs principales."""
        self.tabs = QTabWidget()
        
        # Tab 1: Lista de recomendaciones
        self.create_recommendations_tab()
        
        # Tab 2: An√°lisis detallado
        self.create_analysis_tab()
        
        parent_layout.addWidget(self.tabs)
    
    def create_recommendations_tab(self):
        """Crea la tab de lista de recomendaciones."""
        recommendations_widget = QWidget()
        layout = QVBoxLayout(recommendations_widget)
        
        # Barra de progreso
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        # Tabla de recomendaciones
        self.recommendations_table = QTableWidget()
        self.recommendations_table.setColumnCount(8)
        self.recommendations_table.setHorizontalHeaderLabels([
            "Title", "Artist", "Score", "BPM", "Key", "Transition", "Quality", "Actions"
        ])
        
        # Configurar tabla
        self.recommendations_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.recommendations_table.setAlternatingRowColors(True)
        self.recommendations_table.verticalHeader().setVisible(False)
        
        # Auto-resize columnas
        header = self.recommendations_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)  # Title
        header.setSectionResizeMode(1, QHeaderView.Stretch)  # Artist
        header.setSectionResizeMode(2, QHeaderView.Fixed)    # Score
        header.setSectionResizeMode(3, QHeaderView.Fixed)    # BPM
        header.setSectionResizeMode(4, QHeaderView.Fixed)    # Key
        header.setSectionResizeMode(5, QHeaderView.ResizeToContents)  # Transition
        header.setSectionResizeMode(6, QHeaderView.Fixed)    # Quality
        header.setSectionResizeMode(7, QHeaderView.Fixed)    # Actions
        
        self.recommendations_table.setColumnWidth(2, 80)  # Score
        self.recommendations_table.setColumnWidth(3, 80)  # BPM
        self.recommendations_table.setColumnWidth(4, 60)  # Key
        self.recommendations_table.setColumnWidth(6, 80)  # Quality
        self.recommendations_table.setColumnWidth(7, 120) # Actions
        
        layout.addWidget(self.recommendations_table)
        
        # Label de estado
        self.status_label = QLabel("Generando recomendaciones...")
        self.status_label.setProperty("class", "status_label")
        layout.addWidget(self.status_label)
        
        self.tabs.addTab(recommendations_widget, "üéØ Recomendaciones")
    
    def create_analysis_tab(self):
        """Crea la tab de an√°lisis detallado."""
        analysis_widget = QWidget()
        layout = QVBoxLayout(analysis_widget)
        
        # Splitter para dividir la vista
        splitter = QSplitter(Qt.Horizontal)
        
        # Panel izquierdo: Resumen estad√≠stico
        stats_group = QGroupBox("üìä Estad√≠sticas")
        self.stats_text = QTextEdit()
        self.stats_text.setMaximumHeight(200)
        self.stats_text.setReadOnly(True)
        stats_layout = QVBoxLayout(stats_group)
        stats_layout.addWidget(self.stats_text)
        
        # Panel derecho: An√°lisis detallado de track seleccionado
        details_group = QGroupBox("üîç An√°lisis Detallado")
        self.analysis_text = QTextEdit()
        self.analysis_text.setReadOnly(True)
        details_layout = QVBoxLayout(details_group)
        details_layout.addWidget(self.analysis_text)
        
        splitter.addWidget(stats_group)
        splitter.addWidget(details_group)
        splitter.setSizes([300, 700])
        
        layout.addWidget(splitter)
        
        self.tabs.addTab(analysis_widget, "üìà An√°lisis")
    
    def create_action_buttons(self, parent_layout):
        """Crea los botones de acci√≥n."""
        buttons_layout = QHBoxLayout()
        
        # Bot√≥n de cerrar
        self.close_btn = QPushButton("‚ùå Cerrar")
        self.close_btn.clicked.connect(self.close)
        
        # Bot√≥n de ayuda
        self.help_btn = QPushButton("‚ùì Ayuda")
        self.help_btn.clicked.connect(self.show_help)
        
        buttons_layout.addWidget(self.help_btn)
        buttons_layout.addStretch()
        buttons_layout.addWidget(self.close_btn)
        
        parent_layout.addLayout(buttons_layout)
    
    def connect_signals(self):
        """Conecta las se√±ales."""
        self.refresh_btn.clicked.connect(self.start_recommendation_generation)
        self.recommendations_table.itemSelectionChanged.connect(self.on_recommendation_selected)
        self.recommendations_table.itemDoubleClicked.connect(self.on_recommendation_double_clicked)
    
    def start_recommendation_generation(self):
        """Inicia la generaci√≥n de recomendaciones en background."""
        try:
            print(f"üéØ Iniciando generaci√≥n de recomendaciones para: {self.current_track.get('title', 'Unknown')}")
            
            # Limpiar worker anterior si existe
            if self.worker and self.worker.isRunning():
                print("üîÑ Terminando worker anterior...")
                self.worker.quit()
                self.worker.wait(3000)  # Esperar m√°ximo 3 segundos
                if self.worker.isRunning():
                    print("‚ö†Ô∏è Worker anterior no termin√≥ correctamente")
                    self.worker.terminate()
            
            # Validar track actual
            if not self.current_track or not self.current_track.get('id'):
                self.on_error("Track actual no v√°lido o sin ID")
                return
            
            # Configurar UI para estado de carga
            self.progress_bar.setVisible(True)
            self.progress_bar.setValue(0)
            self.status_label.setText("üîÑ Generando recomendaciones...")
            self.recommendations_table.setRowCount(0)
            self.refresh_btn.setEnabled(False)
            
            # Obtener filtros
            min_score = self.min_score_spin.value() / 100.0
            limit = self.limit_spin.value()
            
            print(f"üìä Configuraci√≥n: min_score={min_score:.2f}, limit={limit}")
            
            # Crear y iniciar worker
            self.worker = RecommendationWorker(self.current_track, limit, min_score)
            self.worker.recommendations_ready.connect(self.on_recommendations_ready)
            self.worker.error_occurred.connect(self.on_error)
            self.worker.progress_updated.connect(self.progress_bar.setValue)
            self.worker.finished.connect(self._on_worker_finished)
            
            print("üöÄ Iniciando worker thread...")
            self.worker.start()
            
        except Exception as e:
            print(f"‚ùå Error iniciando generaci√≥n de recomendaciones: {e}")
            self.on_error(f"Error iniciando an√°lisis: {str(e)}")
    
    def _on_worker_finished(self):
        """Maneja cuando el worker termina."""
        print("‚úÖ Worker thread terminado")
        self.refresh_btn.setEnabled(True)
    
    def on_recommendations_ready(self, recommendations):
        """Maneja cuando las recomendaciones est√°n listas."""
        self.recommendations = recommendations
        self.progress_bar.setVisible(False)
        
        if not recommendations:
            self.status_label.setText("‚ùå No se encontraron recomendaciones compatibles")
            return
        
        self.populate_recommendations_table()
        self.update_analysis_stats()
        self.status_label.setText(f"‚úÖ {len(recommendations)} recomendaciones encontradas")
    
    def on_error(self, error_msg):
        """Maneja errores en la generaci√≥n."""
        print(f"‚ùå Error en di√°logo de recomendaciones: {error_msg}")
        
        self.progress_bar.setVisible(False)
        self.refresh_btn.setEnabled(True)
        self.status_label.setText(f"‚ùå Error: {error_msg}")
        
        # Mostrar mensaje de error m√°s amigable
        user_msg = "No se pudieron generar recomendaciones."
        if "no v√°lido" in error_msg.lower():
            user_msg += "\n\nVerifica que la canci√≥n tenga datos de BPM y tonalidad."
        elif "conexi√≥n" in error_msg.lower() or "database" in error_msg.lower():
            user_msg += "\n\nProblema de conexi√≥n con la base de datos."
        else:
            user_msg += f"\n\nDetalle t√©cnico: {error_msg}"
        
        QMessageBox.warning(self, "Error en Recomendaciones", user_msg)
    
    def populate_recommendations_table(self):
        """Puebla la tabla con las recomendaciones."""
        self.recommendations_table.setRowCount(len(self.recommendations))
        
        for row, (track, analysis) in enumerate(self.recommendations):
            # Title
            title_item = QTableWidgetItem(track.get('title', 'Unknown'))
            title_item.setData(Qt.UserRole, track)  # Guardar datos del track
            self.recommendations_table.setItem(row, 0, title_item)
            
            # Artist
            self.recommendations_table.setItem(row, 1, QTableWidgetItem(track.get('artist', 'Unknown')))
            
            # Score con color
            score_item = QTableWidgetItem(f"{analysis.overall_score:.1%}")
            score_item.setData(Qt.UserRole, analysis)  # Guardar an√°lisis
            
            # Colorear seg√∫n score
            if analysis.overall_score >= 0.8:
                score_item.setBackground(Qt.green)
            elif analysis.overall_score >= 0.6:
                score_item.setBackground(Qt.yellow)
            else:
                score_item.setBackground(Qt.red)
            
            self.recommendations_table.setItem(row, 2, score_item)
            
            # BPM
            bpm = track.get('bpm', 0)
            bpm_text = f"{bpm:.0f}" if bpm and bpm > 0 else "N/A"
            self.recommendations_table.setItem(row, 3, QTableWidgetItem(bpm_text))
            
            # Key
            self.recommendations_table.setItem(row, 4, QTableWidgetItem(track.get('key', 'Unknown')))
            
            # Transition Type
            transition_type = analysis.recommended_type.value.replace('_', ' ').title()
            self.recommendations_table.setItem(row, 5, QTableWidgetItem(transition_type))
            
            # Quality
            quality = analysis.transition_quality.value.title()
            self.recommendations_table.setItem(row, 6, QTableWidgetItem(quality))
            
            # Actions - botones
            actions_widget = self.create_action_buttons_for_row(track, analysis)
            self.recommendations_table.setCellWidget(row, 7, actions_widget)
    
    def create_action_buttons_for_row(self, track, analysis):
        """Crea botones de acci√≥n para una fila."""
        widget = QWidget()
        layout = QHBoxLayout(widget)
        layout.setContentsMargins(2, 2, 2, 2)
        layout.setSpacing(2)
        
        # Bot√≥n play
        play_btn = QPushButton("‚ñ∂Ô∏è")
        play_btn.setToolTip("Reproducir")
        play_btn.setMaximumWidth(30)
        play_btn.clicked.connect(lambda: self.play_track(track))
        
        # Bot√≥n add to playlist
        add_btn = QPushButton("‚ûï")
        add_btn.setToolTip("Agregar a playlist")
        add_btn.setMaximumWidth(30)
        add_btn.clicked.connect(lambda: self.add_to_playlist(track))
        
        layout.addWidget(play_btn)
        layout.addWidget(add_btn)
        
        return widget
    
    def update_analysis_stats(self):
        """Actualiza las estad√≠sticas de an√°lisis."""
        if not self.recommendations:
            return
        
        # Calcular estad√≠sticas
        scores = [analysis.overall_score for _, analysis in self.recommendations]
        avg_score = sum(scores) / len(scores)
        
        # Contar por calidad
        quality_counts = {}
        transition_counts = {}
        
        for _, analysis in self.recommendations:
            quality = analysis.transition_quality.value
            quality_counts[quality] = quality_counts.get(quality, 0) + 1
            
            transition = analysis.recommended_type.value
            transition_counts[transition] = transition_counts.get(transition, 0) + 1
        
        # Crear texto de estad√≠sticas
        stats_text = f"""
<h3>üìä Resumen Estad√≠stico</h3>
<b>Total recomendaciones:</b> {len(self.recommendations)}<br>
<b>Score promedio:</b> {avg_score:.1%}<br><br>

<b>Por Calidad:</b><br>
"""
        
        for quality, count in quality_counts.items():
            percentage = (count / len(self.recommendations)) * 100
            stats_text += f"‚Ä¢ {quality.title()}: {count} ({percentage:.0f}%)<br>"
        
        stats_text += "<br><b>Por Tipo de Transici√≥n:</b><br>"
        for transition, count in transition_counts.items():
            percentage = (count / len(self.recommendations)) * 100
            transition_name = transition.replace('_', ' ').title()
            stats_text += f"‚Ä¢ {transition_name}: {count} ({percentage:.0f}%)<br>"
        
        self.stats_text.setHtml(stats_text)
    
    def on_recommendation_selected(self):
        """Maneja la selecci√≥n de una recomendaci√≥n."""
        current_row = self.recommendations_table.currentRow()
        if current_row < 0 or current_row >= len(self.recommendations):
            return
        
        track, analysis = self.recommendations[current_row]
        self.show_detailed_analysis(track, analysis)
    
    def on_recommendation_double_clicked(self, item):
        """Maneja doble click en una recomendaci√≥n."""
        row = item.row()
        if row < 0 or row >= len(self.recommendations):
            return
        
        track, analysis = self.recommendations[row]
        self.play_track(track)
    
    def show_detailed_analysis(self, track, analysis):
        """Muestra an√°lisis detallado de un track."""
        title = track.get('title', 'Unknown')
        artist = track.get('artist', 'Unknown')
        
        # Crear HTML detallado
        html = f"""
<h3>üîç An√°lisis Detallado</h3>
<b>Track:</b> {title} - {artist}<br><br>

<h4>üéØ Puntuaci√≥n General: {analysis.overall_score:.1%}</h4>
<b>Calidad:</b> {analysis.transition_quality.value.title()}<br>
<b>Tipo recomendado:</b> {analysis.recommended_type.value.replace('_', ' ').title()}<br><br>

<h4>üìä Compatibilidades Espec√≠ficas:</h4>
‚Ä¢ <b>BPM:</b> {analysis.bpm_compatibility:.1%}<br>
‚Ä¢ <b>Tonalidad tradicional:</b> {analysis.key_compatibility:.1%}<br>
‚Ä¢ <b>Fuzzy Keymixing:</b> {analysis.fuzzy_key_compatibility:.1%}<br>
‚Ä¢ <b>Energ√≠a:</b> {analysis.energy_compatibility:.1%}<br>
‚Ä¢ <b>Mood:</b> {analysis.mood_compatibility:.1%}<br><br>

<h4>‚öôÔ∏è Detalles T√©cnicos:</h4>
‚Ä¢ <b>Ratio BPM:</b> {analysis.bpm_ratio:.2f}<br>
‚Ä¢ <b>Relaci√≥n tonal:</b> {analysis.key_relationship}<br>
‚Ä¢ <b>Relaci√≥n fuzzy:</b> {analysis.fuzzy_key_relationship}<br>
‚Ä¢ <b>Delta energ√≠a:</b> {analysis.energy_delta:+.2f}<br>
‚Ä¢ <b>Punto de salida:</b> {analysis.mix_out_point:.1f}s<br>
‚Ä¢ <b>Punto de entrada:</b> {analysis.mix_in_point:.1f}s<br>
‚Ä¢ <b>Duraci√≥n crossfade:</b> {analysis.crossfade_duration:.1f}s<br><br>

<h4>üí° Recomendaciones:</h4>
"""
        
        for rec in analysis.recommendations:
            html += f"‚Ä¢ {rec}<br>"
        
        if analysis.warnings:
            html += "<br><h4>‚ö†Ô∏è Advertencias:</h4>"
            for warning in analysis.warnings:
                html += f"‚Ä¢ {warning}<br>"
        
        if analysis.pitch_shift_recommendation:
            ps = analysis.pitch_shift_recommendation
            html += f"""<br><h4>üéõÔ∏è Pitch Shift Recomendado:</h4>
‚Ä¢ <b>Ajuste:</b> {ps['shift_semitones']:+.1f} semitonos ({ps['direction']})<br>
‚Ä¢ <b>Mejora:</b> {ps['improvement']:.1%}<br>
‚Ä¢ <b>Confianza:</b> {ps['confidence']:.1%}<br>
‚Ä¢ <b>Explicaci√≥n:</b> {ps['explanation']}<br>"""
        
        self.analysis_text.setHtml(html)
    
    def play_track(self, track):
        """Reproduce un track recomendado."""
        print(f"üéµ Playing recommended track: {track.get('title', 'Unknown')} - {track.get('artist', 'Unknown')}")
        self.track_selected.emit(track)
    
    def add_to_playlist(self, track):
        """Agrega un track a una playlist."""
        try:
            print(f"‚ûï Agregando track a playlist: {track.get('title', 'Unknown')}")
            
            from ui.components.playlist_dialog import PlaylistDialog
            from services.playlist_service import PlaylistService
            from core.database import get_db_path
            
            # Validar track
            if not track or not track.get('id'):
                QMessageBox.warning(self, "Error", "Track no v√°lido para agregar a playlist.")
                return
            
            playlist_service = PlaylistService(get_db_path())
            
            # Obtener playlists existentes
            existing_playlists = playlist_service.get_all_playlists()
            print(f"üìÇ {len(existing_playlists)} playlists encontradas")
            
            # Crear men√∫ para seleccionar playlist
            from PySide6.QtWidgets import QMenu
            from PySide6.QtGui import QAction
            menu = QMenu("Agregar a Playlist", self)
            
            # Opci√≥n para crear nueva playlist
            create_new_action = QAction("‚ûï Nueva Playlist", self)
            create_new_action.triggered.connect(lambda: self.create_new_playlist_with_track(track))
            menu.addAction(create_new_action)
            
            if existing_playlists:
                menu.addSeparator()
                menu.addSection("üìÇ Playlists Existentes")
                
                for playlist in existing_playlists:
                    playlist_name = playlist['name']
                    track_count = playlist.get('track_count', 0)
                    action_text = f"üìù {playlist_name} ({track_count} tracks)"
                    
                    action = QAction(action_text, self)
                    action.triggered.connect(lambda checked, pid=playlist['id'], name=playlist_name: 
                                           self.add_track_to_existing_playlist(track, pid, name))
                    menu.addAction(action)
            else:
                menu.addSeparator()
                no_playlists_action = QAction("(No hay playlists disponibles)", self)
                no_playlists_action.setEnabled(False)
                menu.addAction(no_playlists_action)
            
            # Mostrar men√∫ en posici√≥n del cursor
            global_pos = self.mapToGlobal(self.rect().center())
            menu.exec(global_pos)
            
        except ImportError as e:
            print(f"‚ùå Error importando m√≥dulos: {e}")
            QMessageBox.critical(self, "Error", "No se pudieron cargar los componentes necesarios.")
        except Exception as e:
            print(f"‚ùå Error showing playlist menu: {e}")
            QMessageBox.warning(self, "Error", f"No se pudo mostrar el men√∫ de playlists:\n\n{str(e)}")
    
    def create_new_playlist_with_track(self, track):
        """Crea una nueva playlist con el track recomendado."""
        try:
            print(f"üìù Creando nueva playlist con track: {track.get('title', 'Unknown')}")
            
            from ui.components.playlist_dialog import PlaylistDialog
            from services.playlist_service import PlaylistService
            from core.database import get_db_path
            
            # Validar track antes de proceder
            if not track or not track.get('id'):
                QMessageBox.warning(self, "Error", "Track no v√°lido para crear playlist.")
                return
            
            dialog = PlaylistDialog(self)
            
            if dialog.exec() == QDialog.Accepted:
                playlist_service = PlaylistService(get_db_path())
                playlist_data = dialog.get_playlist_data()
                
                print(f"üìÇ Creando playlist: {playlist_data['name']}")
                
                # Crear la playlist
                playlist_id = playlist_service.create_playlist(
                    playlist_data['name'],
                    playlist_data['description'],
                    playlist_data['color']
                )
                
                if playlist_id:
                    # Agregar el track
                    track_id = track.get('id')
                    print(f"‚ûï Agregando track ID {track_id} a playlist ID {playlist_id}")
                    
                    success = playlist_service.add_tracks_to_playlist(playlist_id, [track_id])
                    
                    if success:
                        print(f"‚úÖ Playlist creada exitosamente")
                        QMessageBox.information(
                            self, 
                            "Playlist Creada", 
                            f"Playlist '{playlist_data['name']}' creada exitosamente con:\n'{track.get('title', 'Unknown')}'"
                        )
                    else:
                        print(f"‚ùå Error agregando track a playlist")
                        QMessageBox.warning(self, "Error", 
                                          f"Playlist creada pero no se pudo agregar el track.\n"
                                          f"Puedes agregarlo manualmente desde la biblioteca.")
                else:
                    print(f"‚ùå Error creando playlist")
                    QMessageBox.warning(self, "Error", "No se pudo crear la playlist.")
            else:
                print("üëã Usuario cancel√≥ creaci√≥n de playlist")
                
        except Exception as e:
            print(f"‚ùå Error creando playlist: {e}")
            QMessageBox.critical(self, "Error", f"Error creando playlist:\n\n{str(e)}")
    
    def add_track_to_existing_playlist(self, track, playlist_id, playlist_name):
        """Agrega el track a una playlist existente."""
        try:
            print(f"‚ûï Agregando '{track.get('title', 'Unknown')}' a playlist '{playlist_name}'")
            
            from services.playlist_service import PlaylistService
            from core.database import get_db_path
            
            # Validar par√°metros
            track_id = track.get('id')
            if not track_id:
                QMessageBox.warning(self, "Error", "Track sin ID v√°lido.")
                return
            
            if not playlist_id:
                QMessageBox.warning(self, "Error", "Playlist ID no v√°lido.")
                return
            
            playlist_service = PlaylistService(get_db_path())
            success = playlist_service.add_tracks_to_playlist(playlist_id, [track_id])
            
            if success:
                print(f"‚úÖ Track agregado exitosamente a '{playlist_name}'")
                QMessageBox.information(
                    self, 
                    "Track Agregado", 
                    f"'{track.get('title', 'Unknown')}' agregado exitosamente a:\n'{playlist_name}'"
                )
            else:
                print(f"‚ùå Error agregando track a '{playlist_name}'")
                QMessageBox.warning(self, "Error", 
                                  f"No se pudo agregar el track a '{playlist_name}'.\n\n"
                                  f"Posibles causas:\n"
                                  f"‚Ä¢ El track ya est√° en la playlist\n"
                                  f"‚Ä¢ Error de base de datos\n"
                                  f"‚Ä¢ Permisos insuficientes")
                
        except Exception as e:
            print(f"‚ùå Error agregando track a playlist: {e}")
            QMessageBox.critical(self, "Error", f"Error agregando track a playlist:\n\n{str(e)}")
    
    def show_help(self):
        """Muestra informaci√≥n de ayuda."""
        help_text = """
<h3>üéØ Sistema de Recomendaciones DJ</h3>

<h4>¬øC√≥mo funciona?</h4>
El sistema analiza tu canci√≥n actual y encuentra tracks compatibles bas√°ndose en:

<b>üéõÔ∏è BPM (35%):</b> Compatibilidad de tempo, incluyendo ratios musicales (2:1, 3:2, etc.)<br>
<b>üéº Tonalidad (25%):</b> An√°lisis arm√≥nico tradicional + Fuzzy Keymixing avanzado<br>
<b>‚ö° Energ√≠a (25%):</b> Flujo de energ√≠a para mantener el dancefloor<br>
<b>üé® Mood (15%):</b> Compatibilidad de valence, danceability y acousticness<br>

<h4>üèÜ Calidades de Transici√≥n:</h4>
‚Ä¢ <b>Excellent (90-100%):</b> Transici√≥n perfecta<br>
‚Ä¢ <b>Good (70-89%):</b> Muy buena compatibilidad<br>
‚Ä¢ <b>Fair (50-69%):</b> Compatibilidad moderada<br>
‚Ä¢ <b>Poor (30-49%):</b> Requiere trabajo del DJ<br>
‚Ä¢ <b>Bad (0-29%):</b> No recomendado<br>

<h4>üîÑ Tipos de Transici√≥n:</h4>
‚Ä¢ <b>Harmonic Mix:</b> Mezcla arm√≥nica tradicional<br>
‚Ä¢ <b>Fuzzy Harmonic Mix:</b> Mezcla con flexibilidad tonal<br>
‚Ä¢ <b>Beatmatch:</b> Enfoque en compatibilidad de BPM<br>
‚Ä¢ <b>Pitch Shift Mix:</b> Requiere ajuste de pitch<br>
‚Ä¢ <b>Energy Transition:</b> Cambio de energ√≠a controlado<br>

<h4>üí° Consejos:</h4>
‚Ä¢ Usa el <b>M√≠n. Score</b> para filtrar por calidad<br>
‚Ä¢ Revisa el <b>An√°lisis Detallado</b> para entender cada recomendaci√≥n<br>
‚Ä¢ Experimenta con diferentes tipos de transici√≥n<br>
"""
        
        QMessageBox.information(self, "Ayuda - Recomendaciones DJ", help_text)
    
    def apply_styles(self):
        """Aplica estilos personalizados."""
        self.setStyleSheet("""
        QGroupBox {
            font-weight: bold;
            border: 2px solid #cccccc;
            border-radius: 5px;
            margin-top: 1ex;
            padding-top: 8px;
        }
        
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 10px;
            padding: 0 5px 0 5px;
        }
        
        QLabel[class="track_info"] {
            background: #f0f0f0;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 8px;
            font-size: 12px;
        }
        
        QLabel[class="status_label"] {
            color: #666;
            font-style: italic;
            padding: 4px;
        }
        
        QPushButton[class="btn_primary"] {
            background: #2196F3;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 6px 12px;
            font-weight: bold;
        }
        
        QPushButton[class="btn_primary"]:hover {
            background: #1976D2;
        }
        
        QTableWidget {
            gridline-color: #e0e0e0;
            alternate-background-color: #f9f9f9;
        }
        
        QTableWidget::item:selected {
            background: #e3f2fd;
            color: #1976d2;
        }
        """)
    
    def closeEvent(self, event):
        """Maneja el cierre del di√°logo."""
        try:
            print("üîÑ Cerrando di√°logo de recomendaciones...")
            
            # Limpiar worker thread
            if self.worker and self.worker.isRunning():
                print("üõë Terminando worker thread...")
                self.worker.quit()
                
                # Esperar que termine gracefully
                if not self.worker.wait(3000):  # 3 segundos m√°ximo
                    print("‚ö†Ô∏è Worker no termin√≥ gracefully, forzando...")
                    self.worker.terminate()
                    self.worker.wait(1000)  # 1 segundo m√°s
                
                print("‚úÖ Worker thread terminado")
            
            # Limpiar referencias
            self.worker = None
            self.recommendations = []
            
            print("‚úÖ Di√°logo cerrado correctamente")
            event.accept()
            
        except Exception as e:
            print(f"‚ùå Error cerrando di√°logo: {e}")
            # Aceptar el evento de cierre incluso si hay errores
            event.accept()