#!/usr/bin/env python3
"""
Script de demostraci√≥n de las mejoras en clasificaci√≥n de g√©neros
y validaci√≥n hist√≥rica para DjAlfin
"""

import os
import sys
import sqlite3
from typing import Dict, List

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.genre_classifier import GenreClassifier, GenreClassification
from core.historical_analyzer import HistoricalConsistencyAnalyzer


def demo_genre_classification():
    """Demuestra las capacidades del clasificador de g√©neros."""
    print("üéµ DEMOSTRACI√ìN: Clasificaci√≥n Inteligente de G√©neros")
    print("=" * 60)
    
    classifier = GenreClassifier()
    
    # Casos de prueba con g√©neros problem√°ticos
    test_cases = [
        {
            "raw_genres": ["N/A"],
            "artist": "Apache Indian",
            "year": 1993,
            "description": "G√©nero inv√°lido"
        },
        {
            "raw_genres": ["2008 Universal Fire Victim"],
            "artist": "Dolly Parton",
            "year": 1980,
            "description": "G√©nero corrupto"
        },
        {
            "raw_genres": ["Easy Listening Pop Soul Contemporary R & B"],
            "artist": "Whitney Houston",
            "year": 1992,
            "description": "G√©nero demasiado espec√≠fico"
        },
        {
            "raw_genres": ["electronic dance music", "EDM", "house"],
            "artist": "Daft Punk",
            "year": 2001,
            "sources": ["spotify", "musicbrainz"],
            "description": "M√∫ltiples fuentes, aliases"
        },
        {
            "raw_genres": ["hip-hop", "rap music"],
            "artist": "Eminem",
            "year": 2000,
            "sources": ["spotify"],
            "description": "Aliases de Hip Hop"
        },
        {
            "raw_genres": ["Dubstep"],
            "artist": "Skrillex",
            "year": 1970,  # A√±o incorrecto intencionalmente
            "description": "G√©nero anacr√≥nicamente temprano"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nüìù Caso {i}: {case['description']}")
        print(f"   G√©neros originales: {case['raw_genres']}")
        print(f"   Artista: {case['artist']}, A√±o: {case['year']}")
        
        classification = classifier.classify_genre(
            raw_genres=case["raw_genres"],
            artist=case["artist"],
            year=case["year"],
            sources=case.get("sources", ["file_metadata"])
        )
        
        print(f"   ‚úÖ G√©nero principal: {classification.primary_genre}")
        print(f"   üìä Confianza: {classification.confidence.name} ({classification.confidence.value})")
        
        if classification.subgenres:
            print(f"   üéº Subg√©neros: {', '.join(classification.subgenres)}")
        
        if classification.historical_context:
            print(f"   ‚ö†Ô∏è  Contexto hist√≥rico: {classification.historical_context}")
        
        if classification.decade:
            print(f"   üìÖ D√©cada: {classification.decade}")
        
        print(f"   üîç Fuentes: {', '.join(classification.sources)}")


def demo_normalization():
    """Demuestra la normalizaci√≥n de g√©neros."""
    print("\n\nüîß DEMOSTRACI√ìN: Normalizaci√≥n de G√©neros")
    print("=" * 60)
    
    classifier = GenreClassifier()
    
    # Casos de normalizaci√≥n
    normalization_cases = [
        "electronic dance music",
        "hip-hop",
        "r&b",
        "rock and roll",
        "N/A",
        "2008 universal fire victim",
        "HEAVY METAL",
        "pop music",
        "rhythm and blues",
        "country & western"
    ]
    
    print("G√©nero Original ‚Üí G√©nero Normalizado")
    print("-" * 40)
    
    for genre in normalization_cases:
        normalized = classifier.normalize_genre(genre)
        status = "‚úÖ" if normalized else "‚ùå"
        result = normalized if normalized else "INV√ÅLIDO"
        print(f"{status} '{genre}' ‚Üí '{result}'")


def demo_historical_validation():
    """Demuestra la validaci√≥n hist√≥rica."""
    print("\n\nüï∞Ô∏è  DEMOSTRACI√ìN: Validaci√≥n Hist√≥rica")
    print("=" * 60)
    
    classifier = GenreClassifier()
    
    # Casos de validaci√≥n hist√≥rica
    historical_cases = [
        ("Rock & Roll", 1955, "G√©nero apropiado para la √©poca"),
        ("Dubstep", 2010, "G√©nero apropiado para la √©poca"),
        ("Dubstep", 1970, "G√©nero anacr√≥nicamente temprano"),
        ("Hip Hop", 1975, "G√©nero en sus inicios"),
        ("Trap", 2015, "G√©nero apropiado para la √©poca"),
        ("Hyperpop", 2020, "G√©nero muy reciente"),
        ("Jazz", 1920, "G√©nero cl√°sico apropiado")
    ]
    
    print("G√©nero | A√±o | Validaci√≥n | Descripci√≥n")
    print("-" * 50)
    
    for genre, year, description in historical_cases:
        is_valid = classifier.validate_historical_context(genre, year)
        status = "‚úÖ V√ÅLIDO" if is_valid else "‚ö†Ô∏è  SOSPECHOSO"
        print(f"{genre:<12} | {year} | {status:<12} | {description}")


def demo_database_analysis():
    """Demuestra el an√°lisis de base de datos."""
    print("\n\nüìä DEMOSTRACI√ìN: An√°lisis de Base de Datos")
    print("=" * 60)
    
    # Buscar base de datos
    project_root = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(project_root, "config")
    db_path = os.path.join(config_path, "library.db")
    
    if not os.path.exists(db_path):
        print("‚ùå Base de datos no encontrada. Creando datos de ejemplo...")
        create_demo_database(db_path)
    
    classifier = GenreClassifier()
    
    # Generar estad√≠sticas
    print("üìà Generando estad√≠sticas de g√©neros...")
    stats = classifier.get_genre_statistics(db_path)
    
    print(f"\nüìä Estad√≠sticas:")
    print(f"  ‚Ä¢ Total de pistas: {stats['total_tracks']}")
    print(f"  ‚Ä¢ Pistas con g√©nero: {stats['tracks_with_genre']}")
    print(f"  ‚Ä¢ G√©neros √∫nicos: {stats['unique_genres']}")
    print(f"  ‚Ä¢ G√©neros inv√°lidos: {stats['invalid_genres']}")
    
    if stats['problematic_genres']:
        print(f"\n‚ö†Ô∏è  G√©neros problem√°ticos encontrados:")
        for genre, count in stats['problematic_genres'][:5]:
            print(f"  ‚Ä¢ '{genre}': {count} pistas")
    
    # Sugerencias de correcci√≥n
    print(f"\nüîç Analizando correcciones sugeridas...")
    corrections = classifier.suggest_corrections(db_path)
    
    if corrections:
        print(f"üìù Se sugieren {len(corrections)} correcciones:")
        for i, (file_path, old_genre, new_genre, reason) in enumerate(corrections[:3], 1):
            filename = os.path.basename(file_path)
            print(f"  {i}. {filename}")
            print(f"     '{old_genre}' ‚Üí '{new_genre}' ({reason})")
    else:
        print("‚úÖ No se encontraron g√©neros que requieran correcci√≥n")


def demo_historical_consistency():
    """Demuestra el an√°lisis de consistencia hist√≥rica."""
    print("\n\nüï∞Ô∏è  DEMOSTRACI√ìN: An√°lisis de Consistencia Hist√≥rica")
    print("=" * 60)
    
    project_root = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(project_root, "config")
    db_path = os.path.join(config_path, "library.db")
    
    if not os.path.exists(db_path):
        print("‚ùå Base de datos no encontrada")
        return
    
    analyzer = HistoricalConsistencyAnalyzer()
    
    print("üîç Analizando consistencia hist√≥rica...")
    report = analyzer.generate_consistency_report(db_path)
    
    print(f"\nüìä Resumen del an√°lisis:")
    print(f"  ‚Ä¢ Total de inconsistencias: {report['summary']['total_inconsistencies']}")
    print(f"  ‚Ä¢ Alta severidad: {report['summary']['high_severity']}")
    print(f"  ‚Ä¢ Media severidad: {report['summary']['medium_severity']}")
    print(f"  ‚Ä¢ Baja severidad: {report['summary']['low_severity']}")
    
    if report['by_type']:
        print(f"\nüìã Tipos de problemas encontrados:")
        for issue_type, count in report['by_type'].items():
            print(f"  ‚Ä¢ {issue_type.replace('_', ' ').title()}: {count}")
    
    if report['recommendations']:
        print(f"\nüí° Recomendaciones:")
        for i, rec in enumerate(report['recommendations'], 1):
            print(f"  {i}. {rec}")


def create_demo_database(db_path: str):
    """Crea una base de datos de demostraci√≥n con datos problem√°ticos."""
    os.makedirs(os.path.dirname(db_path), exist_ok=True)
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Crear tabla
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS tracks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            file_path TEXT UNIQUE NOT NULL,
            title TEXT,
            artist TEXT,
            album TEXT,
            genre TEXT,
            year INTEGER,
            bpm REAL,
            key TEXT,
            duration REAL,
            bitrate INTEGER,
            sample_rate INTEGER,
            file_size INTEGER,
            energy REAL,
            rating INTEGER,
            play_count INTEGER DEFAULT 0,
            last_played TIMESTAMP,
            date_added TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # Datos de ejemplo con problemas
    demo_tracks = [
        ("demo1.mp3", "Boom Shack-A-Lak", "Apache Indian", "No Reservations", "N/A", 1993, 95.0, "Am", 240.5),
        ("demo2.mp3", "9 To 5", "Dolly Parton", "9 to 5 and Odd Jobs", "2008 Universal Fire Victim", 1980, 110.0, "G", 165.2),
        ("demo3.mp3", "I Will Always Love You", "Whitney Houston", "The Bodyguard", "Easy Listening Pop Soul Contemporary R & B", 1992, 68.0, "A", 273.8),
        ("demo4.mp3", "One More Time", "Daft Punk", "Discovery", "electronic dance music", 2001, 123.0, "Em", 320.4),
        ("demo5.mp3", "Lose Yourself", "Eminem", "8 Mile", "hip-hop", 2002, 86.0, "Bm", 326.1),
        ("demo6.mp3", "Scary Monsters", "Skrillex", "Scary Monsters and Nice Sprites", "Dubstep", 1970, 140.0, "F#m", 270.3),  # A√±o incorrecto
        ("demo7.mp3", "Stayin' Alive", "Bee Gees", "Saturday Night Fever", "Disco", 1977, 103.0, "Bm", 285.7),
        ("demo8.mp3", "Smells Like Teen Spirit", "Nirvana", "Nevermind", "Grunge", 1991, 117.0, "F", 301.9),
    ]
    
    for track in demo_tracks:
        cursor.execute("""
            INSERT OR REPLACE INTO tracks 
            (file_path, title, artist, album, genre, year, bpm, key, duration)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, track)
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ Base de datos de demostraci√≥n creada en: {db_path}")


def main():
    """Funci√≥n principal de demostraci√≥n."""
    print("üéµ DEMOSTRACI√ìN DE MEJORAS EN METADATOS MUSICALES")
    print("=" * 80)
    print("Este script demuestra las mejoras implementadas para elevar")
    print("la exactitud y consistencia de los metadatos musicales en DjAlfin")
    print("=" * 80)
    
    try:
        # Demostrar clasificaci√≥n de g√©neros
        demo_genre_classification()
        
        # Demostrar normalizaci√≥n
        demo_normalization()
        
        # Demostrar validaci√≥n hist√≥rica
        demo_historical_validation()
        
        # Demostrar an√°lisis de base de datos
        demo_database_analysis()
        
        # Demostrar an√°lisis de consistencia hist√≥rica
        demo_historical_consistency()
        
        print("\n\nüéâ RESUMEN DE MEJORAS IMPLEMENTADAS")
        print("=" * 60)
        print("‚úÖ Clasificaci√≥n inteligente de g√©neros con jerarqu√≠as")
        print("‚úÖ Normalizaci√≥n autom√°tica de g√©neros y aliases")
        print("‚úÖ Validaci√≥n hist√≥rica contra contexto temporal")
        print("‚úÖ Detecci√≥n de g√©neros inv√°lidos y corruptos")
        print("‚úÖ Sugerencias de correcci√≥n autom√°ticas")
        print("‚úÖ An√°lisis de consistencia hist√≥rica")
        print("‚úÖ Integraci√≥n con m√∫ltiples fuentes de metadatos")
        print("‚úÖ Sistema de confianza basado en m√∫ltiples factores")
        
        print("\nüí° BENEFICIOS PARA DJs:")
        print("‚Ä¢ G√©neros m√°s precisos y consistentes")
        print("‚Ä¢ Mejor organizaci√≥n de la biblioteca musical")
        print("‚Ä¢ Detecci√≥n autom√°tica de metadatos problem√°ticos")
        print("‚Ä¢ Validaci√≥n hist√≥rica para evitar anacronismos")
        print("‚Ä¢ Clasificaci√≥n inteligente que aprende de m√∫ltiples fuentes")
        
    except Exception as e:
        print(f"‚ùå Error durante la demostraci√≥n: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()